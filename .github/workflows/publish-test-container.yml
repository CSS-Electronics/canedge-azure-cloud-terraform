name: Publish Test Container Image

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  # Run automatically when Docker files are changed
  push:
    paths:
      - 'mdftoparquet/modules/container_app_job/docker/**'
  pull_request:
    paths:
      - 'mdftoparquet/modules/container_app_job/docker/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: css-electronics/canedge-test-container

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Enhanced permissions for package operations
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Test Container for Azure Container App Job Logging
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mdftoparquet/modules/container_app_job/docker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Try to make the package public using GitHub Script
      - name: Make package public
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PACKAGES_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const packageName = 'canedge-test-container';
            
            console.log(`Attempting to make package public: ${packageName} for ${owner}`);
            
            try {
              // Try organization endpoint first
              console.log('Trying organization endpoint...');
              await github.rest.packages.setPackageVisibilityForOrg({
                package_type: 'container',
                package_name: packageName,
                org: owner,
                visibility: 'public'
              });
              console.log('Successfully set package to public using org endpoint');
            } catch (error) {
              console.log(`Error using org endpoint: ${error.message}`);
              
              try {
                // Fall back to user endpoint
                console.log('Trying user endpoint...');
                await github.rest.packages.setPackageVisibilityForUser({
                  package_type: 'container',
                  package_name: packageName,
                  username: owner,
                  visibility: 'public'
                });
                console.log('Successfully set package to public using user endpoint');
              } catch (secondError) {
                console.log(`Error using user endpoint: ${secondError.message}`);
                console.log('Unable to set package visibility automatically');
              }
            }
